library(igraph)
g <- graph.formula(1-1, 1-2, 1-3, 2-2, 2-3, 2-4, 3-3, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
V(g)
E(g)
str(g)
plot(g)
# Creating Network Graphs
## Undirected and Directed Graphs
library(igraph)
# For small, toy graphs, the function graph.formula can be used. For example,
g <- graph.formula(1-4, 1-2, 1-3, 2-5, 2-3, 2-4, 3-7, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
# creates a graph object g with v = 7 vertices
V(g)
# and 10 edges
E(g)
# This same information, in a slightly more compressed format, is recovered easily using the relevant structure command.
str(g)
# A visual representation of this graph, generated simply through the command
plot(g)
# Creating Network Graphs
## Undirected and Directed Graphs
library(igraph)
# For small, toy graphs, the function graph.formula can be used. For example,
g <- graph.formula(1-4, 1-2, 1-3, 2-5, 2-3, 2-4, 3-7, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
# creates a graph object g with v = 7 vertices
V(g)
# and 10 edges
E(g)
# This same information, in a slightly more compressed format, is recovered easily using the relevant structure command.
str(g)
# A visual representation of this graph, generated simply through the command
plot(g)
dg <- graph.formula(1-+, 1-+2, 1-+3, 2-+2, 2++3)
dg <- graph.formula(1-+1, 1-+2, 1-+3, 2-+2, 2++3)
plot(dg)
dg <- graph.formula(1++1, 1-+2, 1-+3, 2-+2, 2++3)
plot(dg)
# Creating Network Graphs
## Undirected and Directed Graphs
library(igraph)
# For small, toy graphs, the function graph.formula can be used. For example,
g <- graph.formula(1-4, 1-2, 1-3, 2-5, 2-3, 2-4, 3-7, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
# creates a graph object g with v = 7 vertices
V(g)
# and 10 edges
E(g)
# This same information, in a slightly more compressed format, is recovered easily using the relevant structure command.
str(g)
# A visual representation of this graph, generated simply through the command
plot(g)
## Direct graph has -+ convention in graph.formula rest of the things are same as undirected graph
dg <- graph.formula(1-+1, 1-+2, 1-+3, 2-+2, 2++3)
plot(dg)
# Creating Network Graphs
## Undirected and Directed Graphs
library(igraph)
# For small, toy graphs, the function graph.formula can be used. For example,
g <- graph.formula(1-4, 1-2, 1-3, 2-5, 2-3, 2-4, 3-7, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
# creates a graph object g with v = 7 vertices
V(g)
# and 10 edges
E(g)
# This same information, in a slightly more compressed format, is recovered easily using the relevant structure command.
str(g)
# A visual representation of this graph, generated simply through the command
plot(g)
## Direct graph has -+ convention in graph.formula rest of the things are same as undirected graph
dg <- graph.formula(1-+4, 1-+2, 1-+3, 2-+2, 2++3, 4++1)
plot(dg)
# Creating Network Graphs
## Undirected and Directed Graphs
library(igraph)
# For small, toy graphs, the function graph.formula can be used. For example,
g <- graph.formula(1-4, 1-2, 1-3, 2-5, 2-3, 2-4, 3-7, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
# creates a graph object g with v = 7 vertices
V(g)
# and 10 edges
E(g)
# This same information, in a slightly more compressed format, is recovered easily using the relevant structure command.
str(g)
# A visual representation of this graph, generated simply through the command
plot(g)
## Direct graph has -+ convention in graph.formula rest of the things are same as undirected graph
dg <- graph.formula(1-+4, 1-+2, 1-+3, 2-+2, 2++3, 4++1, 4-+2, 3-+4)
plot(dg)
dg1 <- graph.formula(Sam-+Mary, Sam-+Tom, Mary++Tom)
str(dg)
V(dg)$name <- c("Sam", "Mary", "Tom")
plot(dg1)
# Creating Network Graphs
## Undirected and Directed Graphs
library(igraph)
# For small, toy graphs, the function graph.formula can be used. For example,
g <- graph.formula(1-4, 1-2, 1-3, 2-5, 2-3, 2-4, 3-7, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
# creates a graph object g with v = 7 vertices
V(g)
# and 10 edges
E(g)
# This same information, in a slightly more compressed format, is recovered easily using the relevant structure command.
str(g)
# A visual representation of this graph, generated simply through the command
plot(g)
## Direct graph has -+ convention in graph.formula rest of the things are same as undirected graph
dg <- graph.formula(1-+4, 1-+2, 1-+3, 2-+2, 2++3, 4++1, 4-+2, 3-+4)
plot(dg)
## directed graph with vertex names
dg1 <- graph.formula(Sam-+Mary, Sam-+Tom, Mary++Tom)
str(dg1)
# Alternatively, vertex labels can be changed from the default after initially creating the graph, by modifying the name vertex attribute of the graph object.
V(dg1)$name <- c("Sam", "Mary", "Tom")
# Edge
E(dg1)
# Adjacency matrix
get.adjacency(g)
# Creating Network Graphs
## Undirected and Directed Graphs
library(igraph)
# For small, toy graphs, the function graph.formula can be used. For example,
g <- graph.formula(1-4, 1-2, 1-3, 2-5, 2-3, 2-4, 3-7, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
# creates a graph object g with v = 7 vertices
V(g)
# and 10 edges
E(g)
# This same information, in a slightly more compressed format, is recovered easily using the relevant structure command.
str(g)
# A visual representation of this graph, generated simply through the command
plot(g)
## Direct graph has -+ convention in graph.formula rest of the things are same as undirected graph
dg <- graph.formula(1-+4, 1-+2, 1-+3, 2-+2, 2++3, 4++1, 4-+2, 3-+4)
plot(dg)
## directed graph with vertex names
dg1 <- graph.formula(Sam-+Mary, Sam-+Tom, Mary++Tom)
str(dg1)
# Alternatively, vertex labels can be changed from the default after initially creating the graph, by modifying the name vertex attribute of the graph object.
V(dg1)$name <- c("Sam", "Mary", "Tom")
# Edge
E(dg1)
# Adjacency matrix
get.adjacency(g)
# Operations on graph
## Subgraph
h <- induced.subgraph(g, 1:5)
str(h)
h1 <- g - vertices(c(6,7))
h1
h2 <- h1 + vertices(c(6,7))
h2
g <- h + edges(c(4,6),c(4,7),c(5,6),c(6,7))
g <- h2 + edges(c(4,6),c(4,7),c(5,6),c(6,7))
g
plot(g)
## Union
h3 <- h
h4 <- graph.formula(4-6, 4-7, 5-6, 6-7)
g1 <- graph.union(h3,h4)
## Disjoint Union
g2<- h3 %du% h4
plot(g2)
g3<- g %s% h
plot(g3)
g4<- g %m% h
plot(g4)
g5<-g.complementer()
plot(g5)
g5<-complementer(g)
plot(g5)
# Creating Network Graphs
## Undirected and Directed Graphs
library(igraph)
# For small, toy graphs, the function graph.formula can be used. For example,
g <- graph.formula(1-4, 1-2, 1-3, 2-5, 2-3, 2-4, 3-7, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
# creates a graph object g with v = 7 vertices
V(g)
# and 10 edges
E(g)
# This same information, in a slightly more compressed format, is recovered easily using the relevant structure command.
str(g)
# A visual representation of this graph, generated simply through the command
plot(g)
## Direct graph has -+ convention in graph.formula rest of the things are same as undirected graph
dg <- graph.formula(1-+4, 1-+2, 1-+3, 2-+2, 2++3, 4++1, 4-+2, 3-+4)
plot(dg)
## directed graph with vertex names
dg1 <- graph.formula(Sam-+Mary, Sam-+Tom, Mary++Tom)
str(dg1)
# Alternatively, vertex labels can be changed from the default after initially creating the graph, by modifying the name vertex attribute of the graph object.
V(dg1)$name <- c("Sam", "Mary", "Tom")
# Edge
E(dg1)
# Their gender is added to dg as
V(dg)$gender <- c("M","F","M")
# Creating Network Graphs
## Undirected and Directed Graphs
library(igraph)
# For small, toy graphs, the function graph.formula can be used. For example,
g <- graph.formula(1-4, 1-2, 1-3, 2-5, 2-3, 2-4, 3-7, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7)
# creates a graph object g with v = 7 vertices
V(g)
# and 10 edges
E(g)
# This same information, in a slightly more compressed format, is recovered easily using the relevant structure command.
str(g)
# A visual representation of this graph, generated simply through the command
plot(g)
## Direct graph has -+ convention in graph.formula rest of the things are same as undirected graph
dg <- graph.formula(1-+4, 1-+2, 1-+3, 2-+2, 2++3, 4++1, 4-+2, 3-+4)
plot(dg)
## directed graph with vertex names
dg1 <- graph.formula(Sam-+Mary, Sam-+Tom, Mary++Tom)
str(dg1)
# Alternatively, vertex labels can be changed from the default after initially creating the graph, by modifying the name vertex attribute of the graph object.
V(dg1)$name <- c("Sam", "Mary", "Tom")
# Edge
E(dg1)
# Their gender is added to dg as
V(dg1)$gender <- c("M","F","M")
# color
V(g)$color <- "red"
plot(g)
# Edge attributes manipulation
is.weighted(g)
wg <- g
E(wg)$weight <- runif(ecount(wg))
is.weighted(wg)
plot(wg)
g$name <- "Toy Graph"
g
E(g)
E(wg)
library(sand)
g.lazega <- graph.data.frame(elist.lazega,directed="FALSE",vertices=v.attr.lazega)
g.lazega$name <- "Lazega Lawyers"
vcount(g.lazega)
ecount(g.lazega)
list.vertex.attributes(g.lazega)
is.simple(g.lazega)
V(g.lazega)
E(g.lazega)
mg <- g.lazega + edge(V1,V17)
# making a multigraph
mg <- g.lazega + edge('V1','V17')
mg
str(mg)
plot(g.lazega)
is.simple(mg)
E(mg)$weight <- 1
wg2 <- simplify(mg)
is.simple(wg2)
str(wg2)
E(wg2)$weight
neighbors(g.lazega, 5)
degree(g.lazega)
degree(g.lazega, mode="in")
degree(g.lazega, mode="out")
is.connected(g.lazega)
clusters(g.lazega)
dg1 <- graph.formula(Sam-+Mary, Sam-+Tom, Mary++Tom)
is.connected(dg, mode="weak")
is.connected(dg, mode="strong")
dg1 <- graph.formula(Sam-+Mary, Sam-+Tom, Mary++Tom)
is.connected(dg1, mode="weak")
is.connected(dg1, mode="strong")
diameter(g.lazega, weights=NA)
library(igraph)
g.full <- graph.full(7)
plot(g.full)
g.ring <- graph.ring(7)
plot(g.ring)
plot(g.star
g.full <- graph.full(7)
g.ring <- graph.ring(7)
g.tree <- graph.tree(7, children=2, mode="undirected")
g.star <- graph.star(7, mode="undirected")
par(mfrow=c(2, 2))
plot(g.full)
plot(g.ring)
plot(g.tree)
plot(g.star)
dg1 <- graph.formula(Sam-+Mary, Sam-+Tom, Mary++Tom)
is.dag(dg1)
g.bip <- graph.formula(actor1:actor2:actor3,movie1:movie2, actor1:actor2 - movie1,actor2:actor3 - movie2)
V(g.bip)$type <- grepl("Ë†movie", V(g.bip)$name)
str(g.bip, v=T)
plot(g.bip)
# projection
proj <- bipartite.projection(g.bip)
str(proj)
g.bip <- graph.formula(actor1:actor2:actor3,movie1:movie2, actor1:actor2 - movie1,actor2:actor3 - movie2)
V(g.bip)$type <- grepl("Ë†movie", V(g.bip)$name)
str(g.bip, v=T)
# projection
proj <- bipartite.projection(g.bip)
str(proj)
g <- make_bipartite_graph( rep(0:1,length=10), c(1:10))
print(g, v=TRUE)
plot(g)
proj <- bipartite.projection(g)
str(proj)
plot(proj)
g <- make_full_bipartite_graph(10,5)
proj <- bipartite_projection(g)
graph.isomorphic(proj[[1]], make_full_graph(10))
graph.isomorphic(proj[[2]], make_full_graph(5))
## The projection keeps the vertex attributes
M <- matrix(0, nr=5, nc=3)
rownames(M) <- c("Alice", "Bob", "Cecil", "Dan", "Ethel")
colnames(M) <- c("Party", "Skiing", "Badminton")
M[] <- sample(0:1, length(M), replace=TRUE)
M
g2 <- graph_from_incidence_matrix(M)
g2$name <- "Event network"
proj2 <- bipartite_projection(g2)
print(proj2[[1]], g=TRUE, e=TRUE)
print(proj2[[2]], g=TRUE, e=TRUE)
plot(g.lazega)
library(igraph)
plot(g.lazega)
plot(g.lazega)
library(igraph)
plot(g.lazega)
library(igraph)
g.full <- graph.full(7)
g.ring <- graph.ring(7)
g.tree <- graph.tree(7, children=2, mode="undirected")
g.star <- graph.star(7, mode="undirected")
par(mfrow=c(2, 2))
plot(g.full)
plot(g.ring)
plot(g.tree)
plot(g.star)
